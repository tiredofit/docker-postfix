#!/command/with-contenv bash

case "${SASL_AUTH_TYPE,,}" in
    "imap" )
        sasl_auth_type="rimap"
        sasl_mech_options="${SASL_AUTH_IMAP_HOST}"
    ;;
    "ldap" )
        sasl_auth_type="ldap"
        sasl_mech_options="/etc/sasl2/smtpd.conf"
    ;;
esac

archive_management(){
    print_info "Copying Postfix Archive and Archiving"
    mkdir -p "${ARCHIVE_BACKUP_PATH}"
    chown postfix:postfix "${ARCHIVE_BACKUP_PATH}"
    now=$(date +"%Y%m%d-%H%M%S")
    archive_copy=$(mktemp -d)
    silent cp -Rp "${ARCHIVE_PATH}"/{cur,new,tmp} "${archive_copy}"/
    silent rm -rf "${ARCHIVE_PATH}"/cur/*
    silent rm -rf "${ARCHIVE_PATH}"/new/*
    silent rm -rf "${ARCHIVE_PATH}"/tmp/*
    cd "${archive_copy}"
    silent tar -I "zstd -${ARCHIVE_CLEANUP_COMPRESSION_LEVEL}" -cpf "${ARCHIVE_BACKUP_PATH}"/"${now}"-postfix-archive.tar.zst *
    silent chown postfix:postfix "${ARCHIVE_BACKUP_PATH}"/"${now}"-postfix-archive.tar.zst
    cd "${ARCHIVE_PATH}"
    silent rm -rf "${archive_copy}"
    if  [ -n "${ARCHIVE_CLEANUP_TIME_CLEANUP}" ] ; then
        print_info "Cleaning old archive copies"
        silent find "${ARCHIVE_BACKUP_PATH}"/ -mmin +"${ARCHIVE_CLEANUP_TIME_CLEANUP}" -iname "*" -type f -delete;
    fi
}

certificates() {
    CA_NAME=postfix-selfsigned-ca
    CA_SUBJECT=${CA_SUBJECT:-"/C=XX/ST=Postfix/L=Postfix/O=Postfix/CN="}
    CA_CERT_SUBJECT=${CA_CERT_SUBJECT:-${CA_SUBJECT}${CA_NAME}}
    CA_CERT_FILE=${CA_CERT_FILE:-"/certs/${CA_NAME}/${CA_NAME}.crt"}
    CA_KEY_FILE=${CA_KEY_FILE:-"$(dirname "${CA_CERT_FILE}")/${CA_NAME}.key"}
    CREATE_CA=${CREATE_CA:-"TRUE"}

    create_certificate_authority() {
        if [ ! -f "${CA_CERT_FILE}" ] ; then

            print_debug "[certificates | create_certificate_authority] Creating Self Signed Certificate Authority"
            mkdir -p "$(dirname "${CA_CERT_FILE}")"
            echo "000a" > "$(dirname "${CA_CERT_FILE}")"/serial
            touch "$(dirname "${CA_CERT_FILE}")"/certindex

            silent eval "${ssl_exec} req \
                  -newkey rsa:4096 -keyout ${CA_KEY_FILE} \
                  -x509 -days 3650 -nodes -out ${CA_CERT_FILE} \
                  -subj \"${CA_CERT_SUBJECT}\""

            cat > "$(dirname "${CA_CERT_FILE}")"/$CA_NAME.conf << EOF
            [ ca ]
            default_ca = $CA_NAME

            [ $CA_NAME ]
            unique_subject = no
            new_certs_dir = .
            certificate = ${CA_CERT_FILE}
            database = "$(dirname "${CA_CERT_FILE}")"/certindex
            private_key = ${CA_KEY_FILE}
            serial = "$(dirname "${CA_CERT_FILE}")"/serial
            default_days = 3650
            default_md = default
            policy = ${CA_NAME}_policy
            x509_extensions = ${CA_NAME}_extensions

            [ ${CA_NAME}_policy ]
            commonName = supplied
            stateOrProvinceName = supplied
            countryName = supplied
            emailAddress = optional
            organizationName = supplied
            organizationalUnitName = optional

            [ ${CA_NAME}_extensions ]
            basicConstraints = CA:false
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always
            keyUsage = digitalSignature,keyEncipherment
            extendedKeyUsage = serverAuth,clientAuth

            [ req ]
            default_bits = 2048

            [default_conf]
            ssl_conf = ssl_sect

            [ssl_sect]
            system_default = system_default_sect

            [system_default_sect]
            MinProtocol = TLSv1.1
            MaxProtocol = TLSv1.3
            CipherString = DEFAULT
EOF
        else
            print_debug "[certificates | create_certificate_authority] CA Already Exists"
        fi
    }

    create_certificate() {
        if [ "$1" != "" ] ; then
            if var_true "$CREATE_CA" ; then
                if [ ! -f "${CA_CERT_FILE}" ] || [ ! -f "${CA_KEY_FILE}" ] ; then
                    print_debug "[certificates | create_certificate] No CA Found - Creating before generating certificates"
                    create_certificate_authority
                fi
            fi
            CERT_SUBJECT="${CA_SUBJECT}$(basename "${1%%.*}")"

            if var_true "$CREATE_CA" ; then
                if [ ! -f "${1%%.*}".key ] ; then
                    print_debug "[certificates | create_certificate] Creating Certificate: ${1}"
                    silent eval "${ssl_exec} req \
                            -newkey rsa:2048 -keyout ${1%%.*}.key \
                          -nodes -out ${1%%.*}.csr \
                          -subj \"${CERT_SUBJECT}\""
                fi
            else
                if [ ! -f "${1%%.*}".key ] ; then
                    print_debug "[certificates | create_certificate] Creating Certificate: ${1}"
                    silent eval "${ssl_exec} req \
                          -new -x509 -nodes -days 3650
                          -config /tmp/openssl.cnf
                          -out ${1%%.*}.crt \
                          -keyout ${1%%.*}.key"
                fi
            fi

            if var_true "${CREATE_CA}" ; then
                if [ ! -f "${1%%.*}".cert ] ; then
                    print_debug "[certificates | create_certificate] Signing Certificate: ${1}"
                    silent eval "${ssl_exec} ca -batch -config $(dirname "${CA_CERT_FILE}")/${CA_NAME}.conf -notext -in ${1%%.*}.csr -out ${1%%.*}.crt"
                    rm -rf "$(tail -n 1 "$(dirname "${CA_CERT_FILE}")"/certindex | awk '{print $3}').pem"
                    rm -rf "${1%%.*}".csr
                fi
            fi

            if [ -f "${1%%.*}".crt ] && [ -f "${1%%.*}".key ] ; then
                print_debug "[certificates | create_certificate] Merging Certificate and Key for: ${1}"
                   cat "${1%%.*}".crt "${1%%.*}".key > "${1%%.*}".pem
            fi

            if [ ! -f "${1%%.*}"-public.pem ] ; then
                print_debug "[certificates | create_certificate] Creating Public Key for: ${1}"
                silent ${ssl_exec} rsa -in "${1%%.*}".pem -out "${1%%.*}"-public.pem -outform PEM -pubout
            fi
        fi
    }

    check_permissions() {
        if sudo -u postfix [ ! -r "${1}" ] ; then
            print_debug "[certificates | check_permissions] Setting Read Permissions on ${1}"
            chmod 444 "${1}"
        fi
    }

    check_certificates() {
        print_debug "[certificates | check_certificates] Checking Existence of ${1}"
        if [ ! -f "${1}" ] ; then
                mkdir -p "$(dirname "${1}")"
                create_certificate "${1}"
        fi
    }

    check_dhparam() {
        print_debug "[certificates | check_dhparam] Checking Existence of ${TLS_SERVER_DH_PARAM_FILE}"
        if [ ! -f "${TLS_SERVER_DH_PARAM_FILE}" ] ; then
                create_dhparam
        fi
    }

    create_dhparam() {
        print_notice "[certificates | create_dhparam] Creating ${TLS_SERVER_DH_PARAM_FILE}"
        mkdir -p "$(dirname "${TLS_SERVER_DH_PARAM_FILE}")"
        silent ${ssl_exec} dhparam -out "${TLS_SERVER_DH_PARAM_FILE}" "${TLS_SERVER_DH_PARAM_KEYSIZE}"
    }

    trust_ca() {
        if var_true "$CREATE_CA" ; then
            if [ -f "${CA_CERT_FILE}" ]; then
                if [ ! -f /usr/local/share/ca-certificates/"$(basename "${CA_CERT_FILE}")" ] ; then
                    print_debug "[certificates | trust_ca] Trusting CA ${CA_NAME}"
                    ln -sf "${CA_CERT_FILE}" /usr/local/share/ca-certificates/
                    silent update-ca-certificates
                fi
            fi
        fi
    }

    if ! command -v openssl &> /dev/null && ! command -v libressl &> /dev/null ; then
        print_error "[certificates] Can't find a suitable SSL engine - Exiting.."
        exit 1
    fi

    if command -v libressl &> /dev/null ; then
        ssl_exec="libressl"
    fi

    if command -v openssl &> /dev/null ; then
        ssl_exec="openssl"
    fi

    if command -v openssl &> /dev/null &&  command -v libressl &> /dev/null ; then
        ssl_exec="openssl"
    fi

    case "${1,,}" in
        "dhparam" )
            check_dhparam
        ;;
        *)
            check_certificates "${1}"
            check_permissions "${1}"
            trust_ca
        ;;
    esac
}

check_availability() {
    lmtp() {
        if var_true "${ENABLE_LMTP}"; then
            if var_nottrue "${SKIP_LMTP_AVAILABILITY_CHECK}" ; then
                print_debug "[check_availability | lmtp] Checking to see if LMTP Host: ${LMTP_HOST} is accessible"
                counter=0
                while ! (silent nc -z "${LMTP_HOST}" "${LMTP_PORT}") ; do
                    sleep 5
                    (( counter+=5))
                    print_warn "[check_availability | lmtp] LMTP Host '${LMTP_HOST}' is not accessible, retrying.. (${counter} seconds so far)"
                done
            fi
        fi
    }

    milter() {
        if var_true "${ENABLE_MILTER}" && [ "${milter_type}" = "inet" ]; then
            if var_nottrue "${SKIP_MILTER_AVAILABILITY_CHECK}" ; then
                print_debug "[check_availability | milter] Checking to see if Milter Host: ${check_milter_host} is accessible"
                counter=0
                while ! (silent nc -z "${check_milter_host}" "${check_milter_port}") ; do
                    sleep 5
                    (( counter+=5))
                    print_warn "[check_availability | milter] Milter Host '${check_milter_host}' is not accessible, retrying.. (${counter} seconds so far)"
                done
            fi
    fi
    }

    lmtp
    milter
}

configure_fail2ban_postfix() {
    if var_true "${CONTAINER_ENABLE_FIREWALL}" && var_true "${CONTAINER_ENABLE_FAIL2BAN}" ; then
        source /assets/defaults/07-firewall
        print_debug "Fail2Ban: Adding Jail - Postfix"
        cat <<EOF > "${FAIL2BAN_CONFIG_PATH}"/jail.d/postfix.conf
[postfix-sasl]
enabled=${FAIL2BAN_ENABLE_SASL,,}
filter   = postfix[mode=auth]
port     = smtp,465,submission,imap,imaps,pop3,pop3s
logpath = ${LOG_PATH}/${LOG_FILE}
EOF
    fi
}

configure_filesystem() {
    print_debug "[configure_data_dir] Creating Data Location"
    mkdir -p "${CONFIG_PATH}"
    chown postfix:postfix "${CONFIG_PATH}"
    mkdir -p "${DATA_PATH}"
    chown postfix:postfix "${DATA_PATH}"
    print_debug "[configure_data_dir] Creating Queue"
    mkdir -p "${QUEUE_PATH}"
    chown root:postfix "${QUEUE_PATH}"
    mkdir -p "${QUEUE_PATH}"/{active,bounce,corrupt,defer,deferred,flush,hold,incoming,maildrop,pid,private,public,saved,trace}
    chown -R root:root "${QUEUE_PATH}"/pid
    chown postfix:postfix "${QUEUE_PATH}"/{active,bounce,corrupt,defer,deferred,flush,hold,incoming,private,saved,trace}
    chown -R postfix:postdrop "${QUEUE_PATH}"/{maildrop,public}
}

configure_ldap() {
    if var_true "${ENABLE_LDAP}"; then
        if [ "${SETUP_TYPE,,}" = "auto" ] ; then
            print_notice "[configure_ldap} Autoconfiguring"
            transform_file_var \
                                    LDAP_BASE_DN \
                                    LDAP_BIND_DN \
                                    LDAP_BIND_PASS \
                                    LDAP_HOST \
                                    LDAP_SEARCH_DN

            sanity_var LDAP_HOST "LDAP Host"
            sanity_var LDAP_BASE_DN "LDAP Base DN"

            if [ -v LDAP_BIND_DN ] || [ -v LDAP_BIND_PASS ]; then
                ldap_bind="$(cat <<EOF
bind            = yes
bind_dn         = ${LDAP_BIND_DN}
bind_pw         = ${LDAP_BIND_PASS}
EOF
                        )"
        else
            ldap_bind="$(cat <<EOF
bind            = no
EOF
                        )"
            fi

            ### Setup LDAP Users
            ldap_users_cf="ldap:${CONFIG_PATH}/ldap-users.cf, "
            touch "${CONFIG_PATH}"/ldap-users.cf
            chown postfix:postfix "${CONFIG_PATH}"/ldap-users.cf
            cat <<EOF | silent sudo -u postfix tee "${CONFIG_PATH}"/ldap-users.cf
## Custom Generated LDAP USers Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server_host=${LDAP_HOST}
server_port=${LDAP_PORT}
search_base=${LDAP_BASE_DN}
timeout=${LDAP_TIMEOUT}
version=${LDAP_VERSION}
${ldap_bind}
scope=${LDAP_SCOPE_USERS}
query_filter=${LDAP_FILTER_USERS}
result_attribute=${LDAP_ATTRIBUTE_USERS}
EOF

            ### Setup LDAP Aliases
            ldap_aliases_cf="ldap:${CONFIG_PATH}/ldap-aliases.cf, "
            touch "${CONFIG_PATH}"/ldap-aliases.cf
            chown postfix:postfix "${CONFIG_PATH}"/ldap-aliases.cf
            cat <<EOF | silent sudo -u postfix tee "${CONFIG_PATH}"/ldap-aliases.cf
## Custom Generated LDAP Aliases Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server_host=${LDAP_HOST}
server_port=${LDAP_PORT}
search_base=${LDAP_BASE_DN}
timeout=${LDAP_TIMEOUT}
version=${LDAP_VERSION}
${ldap_bind}
scope=${LDAP_SCOPE_ALIAS}
query_filter=${LDAP_FILTER_ALIAS}
result_attribute=${LDAP_ATTRIBUTE_ALIAS}
EOF

            ### Setup LDAP Groups
            ldap_groups_cf="ldap:${CONFIG_PATH}/ldap-groups.cf, "
            touch "${CONFIG_PATH}"/ldap-groups.cf
            chown postfix:postfix "${CONFIG_PATH}"/ldap-groups.cf
            cat <<EOF | silent sudo -u postfix tee "${CONFIG_PATH}"/ldap-groups.cf
## Custom Generated LDAP Groups Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server_host=${LDAP_HOST}
server_port=${LDAP_PORT}
search_base=${LDAP_BASE_DN}
timeout=${LDAP_TIMEOUT}
version=${LDAP_VERSION}
${ldap_bind}
scope=${LDAP_SCOPE_GROUPS}
query_filter=${LDAP_FILTER_GROUPS}
special_result_attribute=${LDAP_ATTRIBUTE_GROUPS_SPECIAL}
leaf_result_attribute=${LDAP_ATTRIBUTE_GROUPS}
EOF

#    		### Setup LDAP Groups Expansion
#    		ldap_groups_expand_cf="ldap:${CONFIG_PATH}/ldap-groups-expand.cf"
#           touch "${CONFIG_PATH}"/ldap-groups-expand.cf
#           chown postfix:postfix "${CONFIG_PATH}"/ldap-groups-expand.cf
#    		cat <<EOF | silent sudo -u postfix tee "${CONFIG_PATH}/ldap-groups-expand.cf
## Custom Generated LDAP Groups Expansion Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)
#
#server_host=${LDAP_HOST}
#server_port=${LDAP_PORT}
#search_base=${LDAP_BASE_DN}
#timeout=${LDAP_TIMEOUT}
#version=${LDAP_VERSION}
#${ldap_bind}
#scope=${LDAP_SCOPE_GROUPS_EXPAND}
#query_filter=${LDAP_FILTER_GROUPS_EXPAND}
#result_attribute=${LDAP_ATTRIBUTE_GROUPS_EXPAND}
#EOF
        fi
    fi
}

configure_postfix_main() {
    if [ "${SETUP_TYPE,,}" = "auto" ] ; then
        print_notice "[configure_postfix_main] Autoconfiguring"

        ### Archiving
        if var_true "${ENABLE_ARCHIVE}"; then
            message_archive="$(cat <<EOF

# Message Archiving
always_bcc                  = ${ARCHIVE_ADDRESS,,}

EOF
                            )"
            if var_true "${ARCHIVE_LOCAL}" ; then
                mkdir -p "${ARCHIVE_PATH}"/{cur,new,tmp}
                chown -R nobody:nogroup "${ARCHIVE_PATH}"
                if ! grep -Fq "$(echo ${ARCHIVE_ADDRESS,,} | cut -d @ -f 1): ${ARCHIVE_PATH}/" >/dev/null 2>&1 ; then
                    echo "$(echo ${ARCHIVE_ADDRESS,,} | cut -d @ -f 1): ${ARCHIVE_PATH}/" >> /etc/aliases
                fi
                archive_local="and being saved to ${ARCHIVE_PATH}"
                newaliases
                print_debug "Enabling Message Archiving - BCCing all sent and received messages to ${ARCHIVE_ADDRESS,,} ${archive_local}"
                if var_false "${ENABLE_ARCHIVE_CLEANUP}" ; then
                    print_debug "[message_archiving] Disabling Archive Cleanup"
                    rm -rf /etc/services.available/30-archive-cleanup
                fi
            fi
        else
            rm -rf /etc/services.available/30-archive-cleanup
        fi

        ### Bounces
        if [ ! -f "${DATA_PATH}"/"${TEMPLATE_BOUNCE}" ]; then
            touch "${DATA_PATH}"/"${TEMPLATE_BOUNCE}"
            chown postfix:postfix "${DATA_PATH}"/"${TEMPLATE_BOUNCE}"
            cat <<EOD | silent sudo -u postfix tee "${DATA_PATH}"/"${TEMPLATE_BOUNCE}"
#
# The failure template is used when mail is returned to the sender;
# either the destination rejected the message, or the destination
# could not be reached before the message expired in the queue.
#

failure_template = <<EOF
Charset: us-ascii
From: MAILER-DAEMON (Mail Delivery System)
Subject: Undelivered Mail Returned to Sender
Postmaster-Subject: Postmaster Copy: Undelivered Mail

This is the mail system at host \$myhostname.

I'm sorry to have to inform you that your message could not
be delivered to one or more recipients. It's attached below.

For further assistance, please send mail to <postmaster>

If you do so, please include this problem report. You can
delete your own text from the attached returned message.

                   The mail system
EOF


#
# The delay template is used when mail is delayed. Note a neat trick:
# the default template displays the delay_warning_time value as hours
# by appending the _hours suffix to the parameter name; it displays
# the maximal_queue_lifetime value as days by appending the _days
# suffix.
#
# Other suffixes are: _seconds, _minutes, _weeks. There are no other
# main.cf parameters that have this special behavior.
#
# You need to adjust these suffixes (and the surrounding text) if
# you have very different settings for these time parameters.
#

delay_template = <<EOF
Charset: us-ascii
From: MAILER-DAEMON (Mail Delivery System)
Subject: Delayed Mail (still being retried)
Postmaster-Subject: Postmaster Warning: Delayed Mail

This is the mail system at host \$myhostname.

####################################################################
# THIS IS A WARNING ONLY.  YOU DO NOT NEED TO RESEND YOUR MESSAGE. #
####################################################################

Your message could not be delivered for more than \$delay_warning_time_hours hour(s).
It will be retried until it is \$maximal_queue_lifetime_days day(s) old.

For further assistance, please send mail to <postmaster>

If you do so, please include this problem report. You can
delete your own text from the attached returned message.

                   The mail system
EOF


#
# The success template is used when mail is delivered to mailbox,
# when an alias or list is expanded, or when mail is delivered to a
# system that does not announce DSN support. It is an error to specify
# a Postmaster-Subject: here.
#

success_template = <<EOF
Charset: us-ascii
From: MAILER-DAEMON (Mail Delivery System)
Subject: Successful Mail Delivery Report

This is the mail system at host \$myhostname.

Your message was successfully delivered to the destination(s)
listed below. If the message was delivered to mailbox you will
receive no further notifications. Otherwise you may still receive
notifications of mail delivery errors from other systems.

                   The mail system
EOF


#
# The verify template is used for address verification (sendmail -bv
# address...). or for verbose mail delivery (sendmail -v address...).
# It is an error to specify a Postmaster-Subject: here.
#

verify_template = <<EOF
Charset: us-ascii
From: MAILER-DAEMON (Mail Delivery System)
Subject: Mail Delivery Status Report

This is the mail system at host \$myhostname.

Enclosed is the mail delivery report that you requested.

                   The mail system
EOF

EOD
        fi

        ### Milter Support
        if var_true "${ENABLE_MILTER}"; then
            print_debug "[configure_postfix_main] Enabling Milter"
            case "${MILTER_TYPE,,}" in
                "socket" )
                    milter_protocol="unix:"
                    milter_host_smtpd="${MILTER_HOST_SMTPD}"
                    milter_host_non_smtpd="${MILTER_HOST_NON_SMTPD}"
                ;;
                "inet" | "rspamd" | * )
                    milter_type=inet
                    milter_protocol="inet:"
                    milter_host_smtpd="${MILTER_HOST_SMTPD}:${MILTER_PORT_SMTPD}"
                    milter_host_non_smtpd="${MILTER_HOST_NON_SMTPD}:${MILTER_PORT_NON_SMTPD}"
                    check_milter_host=$(echo "${milter_host_smtpd}" | cut -d : -f 1)
                    check_milter_port=$(echo "${milter_host_smtpd}" | cut -d : -f 2)
                ;;
            esac

            milter_settings="$(cat <<EOF

# Milter Settings (Spam Filters)
smtpd_milters                   = ${milter_protocol}${milter_host_smtpd}
non_smtpd_milters               = ${milter_protocol}${milter_host_non_smtpd}
milter_protocol                 = ${MILTER_VERSION}
milter_mail_macros              = ${MILTER_MAIL_MACROS}
milter_default_action           = ${MILTER_DEFAULT_ACTION}
EOF
                        )"

            milter_master_cf="  -o milter_macro_daemon_name=ORIGINATING"
        fi

        ### Plus Addressing
        if var_true "${ENABLE_PLUS_ADDRESSING}" ; then
            print_debug "Enabling Plus Addressing Settings"
            touch "${CONFIG_PATH}"/plus_address_rewrite.pcre
            chown postfix:postfix "${CONFIG_PATH}"/plus_address_rewrite.pcre
            cat <<EOF | silent sudo -u postfix tee "${CONFIG_PATH}"/plus_address_rewrite.pcre
/([^+]+)\+.*@(.+)/    \$1@\$2
EOF
            #sudo -u postfix postmap "${CONFIG_PATH}"/plus_address_rewrite.pcre
            plus_addressing=", regexp:${CONFIG_PATH}/plus_address_rewrite.pcre"
        fi

        ### PostSRSd | Sender Rewrite Scheme
        if var_true "${ENABLE_SENDER_REWRITE_SCHEME}" ; then
            srsd_settings="$(cat <<EOF
# PostSRSd settings
sender_canonical_maps = tcp:${POSTSRD_LISTEN_HOST}:${POSTSRSD_FORWARD_PORT}
sender_canonical_classes = envelope_sender
recipient_canonical_maps = tcp:${POSTSRD_LISTEN_HOST}:${POSTSRSD_REVERSE_PORT}
recipient_canonical_classes= envelope_recipient,header_recipient

EOF
                            )"
        fi

        if var_true "${ENABLE_POSTSCREEN}" ; then
            touch "${CONFIG_PATH}"/postscreen_dnsbl_reply_map.pcre
            chown postfix:postfix "${CONFIG_PATH}"/postscreen_dnsbl_reply_map.pcre
            cat | silent sudo -u postfix tee "${CONFIG_PATH}"/postscreen_dnsbl_reply_map.pcre <<EOF
## Custom Generated Postscreen DNSBL Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

# We will be rejecting much mail which is listed in multiple DNSBLs.
# We're not proud of some of the lists we are using, thus have given
# them lower scores in postscreen_dnsbl_sites listing. So this checks
# the DNSBL name postscreen(8) gets from dnsblog(8), and if it's not
# one of our Tier 1 DNSBL sites, it changes what the sender will see:

!/^zen\\.spamhaus\\.org\$/         multiple DNS-based blocklists
EOF

            if [ ! -f "${CONFIG_PATH}"/"${POSTSCREEN_DNSBL_FILE}" ] ; then
                touch "${CONFIG_PATH}"/"${POSTSCREEN_DNSBL_FILE}"
                chown postfix:postfix "${CONFIG_PATH}"/"${POSTSCREEN_DNSBL_FILE}"
                cat <<EOF | silent sudo -u postfix tee "${CONFIG_PATH}"/"${POSTSCREEN_DNSBL_FILE}"
postscreen_dnsbl_sites =
  wl.mailspike.net=127.0.0.[18;19;20]*-2
  hostkarma.junkemailfilter.com=127.0.0.1*-2
  list.dnswl.org=127.0.[0..255].0*-2
  list.dnswl.org=127.0.[0..255].1*-4
  list.dnswl.org=127.0.[0..255].2*-6
  list.dnswl.org=127.0.[0..255].3*-8
  ix.dnsbl.manitu.net*2
  bl.spamcop.net*2
  bl.suomispam.net*2
  hostkarma.junkemailfilter.com=127.0.0.2*3
  hostkarma.junkemailfilter.com=127.0.0.4*2
  hostkarma.junkemailfilter.com=127.0.1.2*1
  backscatter.spameatingmonkey.net*2
  bl.ipv6.spameatingmonkey.net*2
  bl.spameatingmonkey.net*2
  b.barracudacentral.org=127.0.0.2*7
  bl.mailspike.net=127.0.0.2*5
  bl.mailspike.net=127.0.0.[10;11;12]*4
  dnsbl.sorbs.net=127.0.0.10*8
  dnsbl.sorbs.net=127.0.0.5*6
  dnsbl.sorbs.net=127.0.0.7*3
  dnsbl.sorbs.net=127.0.0.8*2
  dnsbl.sorbs.net=127.0.0.6*2
  dnsbl.sorbs.net=127.0.0.9*2
  zen.spamhaus.org=127.0.0.[10;11]*8
  zen.spamhaus.org=127.0.0.[4..7]*6
  zen.spamhaus.org=127.0.0.3*4
  zen.spamhaus.org=127.0.0.2*3
EOF
            fi

            truefalse_yesno POSTSCREEN_ENABLE_NON_SMTP_COMMAND
            truefalse_yesno POSTSCREEN_ENABLE_PIPELINING
            touch "${CONFIG_PATH}"/postscreen_cache.lmdb
            chown postfix:postfix "${CONFIG_PATH}"/postscreen_cache.lmdb
            postscreen_settings="$(cat <<EOF

### Before-220 tests
postscreen_blacklist_action     = ${POSTSCREEN_BLACKLIST_ACTION}
postscreen_cache_map            = lmdb:${CONFIG_PATH}/postscreen_cache
postscreen_cache_cleanup_interval = ${POSTSCREEN_CACHE_CLEANUP_INTERVAL}
postscreen_dnsbl_action         = ${POSTSCREEN_DNSBL_ACTION}
postscreen_dnsbl_reply_map      = pcre:${CONFIG_PATH}/postscreen_dnsbl_reply_map.pcre
postscreen_dnsbl_threshold      = ${POSTSCREEN_DNSBL_THRESHOLD}
postscreen_dnsbl_ttl            = ${POSTSCREEN_DNSBL_TTL}
postscreen_greet_action         = ${POSTSCREEN_GREET_ACTION}
postscreen_greet_banner         = ${POSTSCREEN_GREET_BANNER}
postscreen_greet_ttl            = ${POSTSCREEN_GREET_TTL}
postscreen_greet_wait           = ${POSTSCREEN_GREET_WAIT}
postscreen_non_smtp_command_enable = ${POSTSCREEN_ENABLE_NON_SMTP_COMMAND}
postscreen_pipelining_enable    = ${POSTSCREEN_ENABLE_PIPELINING}
postscreen_whitelist_interfaces = \$mynetworks, static:all
$(cat "${CONFIG_PATH}"/"${POSTSCREEN_DNSBL_FILE}")
EOF
                                )"
            postscreen_master_cf="$(cat <<EOF
smtp      inet  n       -       n       -       1       postscreen
smtpd     pass  -       -       n       -       -       smtpd ${log_verbosity}
EOF
                                )"
        else
            postscreen_master_cf="$(cat <<EOF
smtp      inet  n       -       n       -       -       smtpd ${log_verbosity}
EOF
                                )"
        fi

        ### Relay Hosts
        if var_true "${ENABLE_RELAY_HOST}"; then
            transform_file_var \
                                    RELAY_HOST \
                                    RELAY_USER \
                                    RELAY_PASS \
                                    RELAY_PORT

            sanity_var RELAY_HOST "Relay Host"
            if [ -z "${RELAY_USER}" ] || [ -z "${RELAY_PASS}" ] ; then
                RELAY_ENABLE_AUTH="no"
            else
                print_notice "[configure_relay_host] Auto configuring SASL Outgoing Password"
                RELAY_ENABLE_AUTH="yes"
                relayuserpass="${RELAY_USER}:${RELAY_PASS}"
            fi

            touch "${CONFIG_PATH}"/sasl_passwd
            chown postfix "${CONFIG_PATH}"/sasl_passwd
            cat <<EOF | silent sudo -u postfix tee "${CONFIG_PATH}"/sasl_passwd
## Custom Generated SASL Relay Outgoing Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

${RELAY_HOST}:${RELAY_PORT} ${relayuserpass}
EOF

            sudo -u postfix postmap lmdb:"${CONFIG_PATH}"/sasl_passwd

            truefalse_yesno RELAY_ENABLE_TLS

            smtp_relay="$(cat <<EOF

# SMTP Relay Host
relayhost                       = ${RELAY_HOST}:${RELAY_PORT}
smtp_sasl_auth_enable           = ${RELAY_ENABLE_AUTH}
smtp_sasl_security_options      = ${RELAY_SECURITY_OPTIONS}
smtp_sasl_mechanism_filter      = ${RELAY_MECHANISM_FILTER}
smtp_sasl_password_maps         = lmdb:${CONFIG_PATH}/sasl_passwd
smtp_use_tls                    = ${RELAY_ENABLE_TLS}

EOF
                        )"
        fi

        ### Transport Maps
        if var_true "${ENABLE_TRANSPORT_MAP}"; then
            if [ ! -f "${CONFIG_PATH}"/"${TRANSPORT_MAP}" ]; then
                touch "${CONFIG_PATH}"/"${TRANSPORT_MAP}"
                chown postfix:postfix "${CONFIG_PATH}"/"${TRANSPORT_MAP}"
            fi
            if [ ! -f "${DATA_LOCATION}"/"${TRANSPORT_MAP}".db ] ; then
                sudo -u postfix postmap lmdb:"${CONFIG_PATH}"/"${TRANSPORT_MAP}"
            fi

            virtual_transport_map=", lmdb:${CONFIG_PATH}/${TRANSPORT_MAP}"
            transport_map="$(cat <<EOF
transport_maps = lmdb:${CONFIG_PATH}/${TRANSPORT_MAP}
EOF
                            )"
        fi

        ### Additional Mailbox Mapping
        if [ -n "${ADDITIONAL_VIRTUAL_MAILBOX_MAPS}" ]; then
            touch "${CONFIG_PATH}"/"${ADDITIONAL_VIRTUAL_MAILBOX_MAPS}"
            chown postfix:postfix "${CONFIG_PATH}"/"${ADDITIONAL_VIRTUAL_MAILBOX_MAPS}"
            sudo -u postfix postmap lmdb:"${CONFIG_PATH}"/"${ADDITIONAL_VIRTUAL_MAILBOX_MAPS}"
            additional_virtual_mailbox_maps=", lmdb:${CONFIG_PATH}/${ADDITIONAL_VIRTUAL_MAILBOX_MAPS}"
        fi

        ### Additional Alias Mapping
        if [ -n "${ADDITIONAL_VIRTUAL_ALIAS_MAPS}" ]; then
            touch "${CONFIG_PATH}"/"${ADDITIONAL_VIRTUAL_ALIAS_MAPS}"
            chown postfix:postfix "${CONFIG_PATH}"/"${ADDITIONAL_VIRTUAL_ALIAS_MAPS}"
            case "${ADDITIONAL_VIRTUAL_ALIAS_MAPS##*.}" in
                pcre )
                    additional_virtual_alias_maps_prefix="regexp"
                ;;
                lmdb | *)
                    sudo -u postfix postmap lmdb:"${CONFIG_PATH}"/"${ADDITIONAL_VIRTUAL_ALIAS_MAPS}"
                    additional_virtual_alias_maps_prefix="lmdb"
                ;;
            esac
            additional_virtual_alias_maps=", ${additional_virtual_alias_maps_prefix}:${CONFIG_PATH}/${ADDITIONAL_VIRTUAL_ALIAS_MAPS}"
        fi

        ### Header Checks
        if var_true "${ENABLE_HEADER_CHECKS}" ; then
            header_checks="$(cat <<EOF
## Header Checks
header_checks = regexp:/${DATA_PATH}/header_checks.pcre
EOF
                        )"
            if [ ! -f "${CONFIG_PATH}"/header_checks.pcre ] ; then touch "${CONFIG_PATH}"/header_checks.pcre ; chown postfix:postfix "${CONFIG_PATH}"/header_checks.pcre ; fi

            ### Logging: Subject Line (Incoming)
            if var_true "${LOG_SUBJECT}" ; then
                if ! grep -q "Subject:" "${CONFIG_PATH}"/header_checks.pcre ; then
                    echo "/^Subject:/     INFO" | silent sudo -u postfix tee -a "${CONFIG_PATH}"/header_checks.pcre
                    #silent sudo -u postfix postmap "${CONFIG_PATH}"/header_checks.pcre
                fi

            else
                if [ -f "${CONFIG_PATH}"/header_checks.pcre ] ; then
                    sed -i '/Subject:/d' "${CONFIG_PATH}"/header_checks.pcre
                    #silent sudo -u postfix postmap "${CONFIG_PATH}"/header_checks.pcre
                fi
            fi
        fi

        ### SMTP Header Checks
        if var_true "${ENABLE_SMTP_HEADER_CHECKS}" ; then
            smtp_header_checks="$(cat <<EOF
## SMTP Header Checks
smtp_header_checks = regexp:/${DATA_PATH}/smtp_header_checks.pcre

EOF
                                )"
            if [ ! -f "${CONFIG_PATH}"/smtp_header_checks.pcre ] ; then touch "${CONFIG_PATH}"/smtp_header_checks.pcre ; chown postfix:postfix "${CONFIG_PATH}"/smtp_header_checks.pcre ; fi

            ### Logging: Subject Line (Outgoing)
            if var_true "${LOG_SUBJECT_SMTP}" ; then
                if ! grep -q "Subject:" "${CONFIG_PATH}"/smtp_header_checks.pcre ; then
                    echo "/^Subject:/     INFO" | silent sudo -u postfix tee -a "${CONFIG_PATH}"/smtp_header_checks.pcre
                    silent sudo -u postfix postmap "${CONFIG_PATH}"/smtp_header_checks.pcre
                fi
            else
                if [ -f "${CONFIG_PATH}"/smtp_header_checks.pcre ] ; then
                    sed -i '/Subject:/d' "${CONFIG_PATH}"/smtp_header_checks.pcre
                    silent sudo -u postfix postmap "${CONFIG_PATH}"/smtp_header_checks.pcre
                fi
            fi
        fi



        if var_true "${ENABLE_SMTPD_SASL}" ; then
            smtpd_sasl_settings="$(cat <<EOF
# SASL
smtpd_sasl_path                 = smtpd
smtpd_sasl_auth_enable          = ${SASL_AUTH_ENABLE}
broken_sasl_auth_clients        = ${SASL_BROKEN_AUTH_CLIENTS}
smtpd_sasl_security_options    = ${SASL_SECURITY_OPTIONS}
smtpd_sasl_tls_security_options = ${SASL_SECURITY_OPTIONS_TLS}
EOF
                                )"
        fi

        if var_true "${ENABLE_VIRTUAL_MAPS}" ; then
            virtual_maps="$(cat <<EOF
virtual_mailbox_domains         = ${VIRTUAL_MAILBOX_DOMAINS}
virtual_mailbox_maps            = ${ldap_users_cf}${virtual_transport_map}${additional_virtual_mailbox_maps}
virtual_alias_maps              = ${ldap_aliases_cf}${ldap_groups_cf}${ldap_groups_expand_cf}${plus_addressing}${additional_virtual_alias_maps}

EOF
                        )"
        fi


        if var_true "${ENABLE_VIRTUAL_TRANSPORT}" ; then
            if var_true "${ENABLE_LMTP}" ; then
                virtual_transport="$(cat <<EOF
virtual_transport               = lmtp:${LMTP_HOST}:${LMTP_PORT}
EOF
                                    )"

                lmtp_master_cf="lmtp      unix  -       -       n       -       -       lmtp ${log_verbosity}"
            fi
        fi

        ## Filtering Options
        ### MUA Restrictions
        if var_true "${ENABLE_MUA_RESTRICTIONS}" ; then
            mua_restrictions="$(cat <<EOF
smtpd_restriction_classes       = mua_sender_restrictions, mua_client_restrictions, mua_helo_restrictions
mua_client_restrictions         = permit_sasl_authenticated, reject
mua_sender_restrictions         = permit_sasl_authenticated, reject
mua_helo_restrictions           = permit_mynetworks, reject_non_fqdn_hostname, reject_invalid_hostname, permit
EOF
                            )"

            smtpd_client_restrictions_master_cf="$(cat <<EOF
  -o smtpd_client_restrictions=\$mua_client_restrictions
  -o smtpd_helo_restrictions=\$mua_helo_restrictions
  -o smtpd_sender_restrictions=\$mua_sender_restrictions
EOF
                                                )"

        fi


        ### SMTPD Client Restrictions
        if var_true "${ENABLE_SMTPD_CLIENT_RESTRICTIONS}" ; then
smtpd_client_restrictions="$(cat <<EOF
smtpd_client_restrictions       = permit_mynetworks, permit_auth_destination, permit_sasl_authenticated,
EOF
                            )"
        fi

        ### SMTPD Data Restrictions
        if var_true "${ENABLE_SMTPD_DATA_RESTRICTIONS}" ; then
            smtpd_data_restrictions="$(cat <<EOF
smtpd_data_restrictions         = reject_unauth_pipelining
EOF
                                    )"
        fi

        if var_true "${ENABLE_SMTPD_RECIPIENT_RESTRICTIONS}" ; then
            smtpd_recipient_restrictions="$(cat <<EOF
smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unknown_recipient_domain, reject_non_fqdn_recipient, reject_unauth_destination, reject_unauth_pipelining, reject_invalid_hostname
EOF
                                )"
        fi

        ### HELO
            #### Require Client to send HELO
        if var_true "${SMTPD_HELO_REQUIRED}" ; then
            smtpd_helo_required="smtpd_helo_required             = yes"
        fi

            #### Reject when doesn't have a proper A record
        if var_true "${SMTPD_REJECT_INVALID_A_RECORD}" ; then
            smtpd_reject_invalid_a_record="reject_unknown_client_hostname, "
        fi


            #### Reject when hostname does not follow RFC
        if var_true "${SMTPD_HELO_REJECT_MALFORMED_HOSTNAME}" ; then
            smtpd_helo_reject_malformed_hostname="reject_invalid_helo_hostname, "
        fi


            #### Reject when doesn't resolve as Fully Qualified
        if var_true "${SMTPD_HELO_REJECT_NON_FQDN_HOSTNAME}" ; then
            smtpd_helo_reject_non_fqdn_hostname="reject_non_fqdn_helo_hostname, "
        fi

            #### Reject when doesn't have a hostname
        if var_true "${SMTPD_HELO_REJECT_UNKNOWN_HOSTNAME}" ; then
            smtpd_helo_reject_unknown_hostname="reject_unknown_helo_hostname, "
        fi

            #### Discard when EHLO contains chunking to cancel out smtp smuggling
        if [ -n "${SMTPD_DISCARD_EHLO_KEYWORDS}" ] ; then
            smtpd_discard_ehlo_keywords="$(cat <<EOF
smtpd_discard_ehlo_keywords=${SMTP_DISCARD_EHLO_KEYWORDS}
EOF
                                        )"
        fi

            #### Forbid bare newlines (SMTP Smuggling CVE 2023-51764)
        if var_true "${SMTPD_FORBID_BARE_NEWLINE}"; then
            smtpd_forbid_bare_newline="$(cat <<EOF
smtpd_forbid_bare_newline=yes
EOF
                                        )"
        fi

            #### Reject when doesn't have a hostname
        if var_true "${SMTPD_REJECT_INVALID_HOSTNAME}" ; then
            smtpd_reject_invalid_hostname="reject_invalid_hostname, "
        fi

            #### Reject when missing PTR record
        if var_true "${SMTPD_REJECT_MISSING_PTR}" ; then
            smtpd_reject_missing_ptr="reject_unknown_reverse_client_hostname, "
        fi

        ### SMTPD HELO restrictions from above
        if var_true "${ENABLE_SMTPD_HELO_RESTRICTIONS}" ; then
            smtpd_helo_restrictions="$(cat <<EOF
smtpd_helo_restrictions         = permit_mynetworks, permit_sasl_authenticated, ${smtpd_reject_invalid_hostname}${smtpd_helo_reject_malformed_hostname}${smtpd_helo_reject_non_fqdn_hostname}${smtpd_helo_reject_unknown_hostname}
EOF
                        )"
        fi

        if var_true "${ENABLE_SMTPD_SENDER_RESTRICTIONS}" ; then
            touch "${CONFIG_PATH}"/sender_domain_checks
            chown postfix:postfix "${CONFIG_PATH}"/sender_domain_checks
            smtpd_sender_restrictions="$(cat <<EOF
smtpd_sender_restrictions       = permit_mynetworks, permit_sasl_authenticated, check_sender_access lmdb:${CONFIG_PATH}/sender_domain_checks, reject_unknown_sender_domain,${smtpd_reject_missing_ptr}${smtpd_reject_invalid_a_record}
EOF
                                    )"
            silent sudo -u postfix postmap lmdb:"${CONFIG_PATH}"sender_domain_checks
        fi

        ### Write Configuration File
        truefalse_yesno APPEND_DOT_MYDOMAIN
        truefalse_yesno BIFF
        truefalse_yesno CONFIRM_DELAY_CLEARED
        if var_true "${ENABLE_THREADED_BOUNCES}" ; then ENABLE_THREADED_BOUNCES=yes ; else ENABLE_THREADED_BOUNCES=no ; fi
        truefalse_yesno SASL_BROKEN_AUTH_CLIENTS
        truefalse_yesno DISABLE_VRFY_COMMAND
        truefalse_yesno OWNER_REQUEST_SPECIAL
        truefalse_yesno SASL_AUTH_ENABLE
        truefalse_yesno TLS_SERVER_AUTH_ONLY
        truefalse_yesno TLS_SERVER_RECEIVED_HEADER

        rm -rf /etc/postfix/main.cf
        ln -sf "${CONFIG_PATH}"/main.cf /etc/postfix/main.cf
        touch "${CONFIG_PATH}"/main.cf
        chown postfix:postfix "${CONFIG_PATH}"/main.cf
        cat  | silent sudo -u postfix tee "${CONFIG_PATH}"/main.cf <<EOF
## Custom Generated Postfix Main Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

alias_maps                      = lmdb:/etc/postfix/aliases
append_dot_mydomain             = ${APPEND_DOT_MYDOMAIN}
biff                            = ${BIFF}
bounce_template_file            = ${DATA_PATH}/${TEMPLATE_BOUNCE}
compatibility_level             = ${COMPATIBILITY_LEVEL}
disable_vrfy_command            = ${DISABLE_VRFY_COMMAND}
inet_interfaces                 = all
inet_protocols                  = ipv4
mail_owner                      = postfix
mailq_path                      = /usr/bin/mailq
mydestination                   = localhost
myhostname                      = ${SERVER_NAME}
mynetworks                      = ${ACCEPTED_NETWORKS}
myorigin                        = ${CONFIG_PATH}/mailname
newaliases_path                 = /usr/bin/newaliases
owner_request_special           = ${OWNER_REQUEST_SPECIAL}
queue_directory                 = ${QUEUE_PATH}
recipient_delimiter             = +
sendmail_path                   = /usr/sbin/sendmail
smtpd_banner                    = ${SMTPD_BANNER}
${smtp_relay}
${virtual_maps}
${virtual_transport}
${transport_map}
${header_checks}
${smtp_header_checks}
${postscreen_settings}
${milter_settings}
${message_archive}

# restrictions
${mua_restrictions}
${smtpd_client_restrictions}
${smtpd_data_restrictions}
${smtpd_helo_required}
${smtpd_helo_restrictions}
${smtpd_recipient_restrictions}
smtpd_relay_restrictions            = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
${smtpd_sender_restrictions}
${smtpd_discard_ehlo_keyword}
${smtpd_forbid_bare_newline}
${smtpd_sasl_settings}

# TLS encryption - server
smtpd_tls_security_level            = ${TLS_SERVER_SECURITY_LEVEL}
smtpd_tls_auth_only                 = ${TLS_SERVER_AUTH_ONLY}
smtpd_tls_cert_file                 = ${TLS_SERVER_CERT_FILE}
smtpd_tls_key_file                  = ${TLS_SERVER_KEY_FILE}
smtpd_tls_loglevel                  = ${LOG_LEVEL_TLS_SERVER}
smtpd_tls_received_header           = ${TLS_SERVER_RECEIVED_HEADER}
smtpd_tls_session_cache_timeout     = ${TLS_SERVER_SESSION_CACHE_TIMEOUT}
tls_random_source                   = dev:/dev/urandom
smtpd_tls_dh1024_param_file         = ${TLS_SERVER_DH_PARAM_FILE}
smtpd_tls_session_cache_database    = lmdb:${CONFIG_PATH}/smtpd_scache
smtpd_tls_mandatory_exclude_ciphers = ${TLS_SERVER_MANDATORY_EXCLUDE_CIPHERS}
smtpd_tls_mandatory_protocols       = ${TLS_SERVER_MANDATORY_PROTOCOLS}
smtpd_tls_protocols                 = ${TLS_SERVER_PROTOCOLS}

# TLS encryption - client
smtp_tls_security_level             = ${TLS_CLIENT_SECURITY_LEVEL}
smtp_tls_loglevel                   = ${LOG_LEVEL_TLS_CLIENT}
smtp_tls_mandatory_ciphers          = ${TLS_CLIENT_MANDATORY_CIPHERS}
smtp_tls_mandatory_protocols        = ${TLS_CLIENT_MANDATORY_PROTOCOLS}
smtp_tls_session_cache_database     = lmdb:${CONFIG_PATH}/smtp_scache

${srsd_settings}

# mail reject codes
unknown_address_reject_code         = 550
unknown_client_reject_code          = 550
unknown_hostname_reject_code        = 554
unknown_local_recipient_reject_code = 550
unknown_relay_recipient_reject_code = 554
unknown_virtual_alias_reject_code   = 550
unknown_virtual_mailbox_reject_code = 550

## bounces
confirm_delay_cleared               = ${CONFIRM_DELAY_CLEARED}
enable_threaded_bounces             = ${ENABLE_THREADED_BOUNCES,,}

# deferred mail intervals
queue_run_delay                     = ${QUEUE_DELAY}
minimal_backoff_time                = ${BACKOFF_TIME_MIN}
delay_warning_time                  = ${DELAY_WARNING_TIME}
maximal_backoff_time                = ${BACKOFF_TIME_MAX}
maximal_queue_lifetime              = ${LIFETIME_QUEUE_MAX}
bounce_queue_lifetime               = ${LIFETIME_QUEUE_BOUNCE}
qmgr_message_recipient_limit        = ${LIMIT_MESSAGE_RECIPIENTS}
message_size_limit                  = ${LIMIT_MESSAGE_SIZE}
EOF
    fi
}

configure_postfix_master() {
    if [ "${SETUP_TYPE,,}" = "auto" ] ; then
        print_notice "[configure_postfix_master] Autoconfiguring"
        rm -rf /etc/postfix/master.cf
        ln -sf "${CONFIG_PATH}"/master.cf /etc/postfix/master.cf
        touch "${CONFIG_PATH}"/master.cf
        chown postfix:postfix "${CONFIG_PATH}"/master.cf
        case "${MODE,,}" in
            "relay" | "postfix-relay" )
                cat | silent sudo -u postfix tee "${CONFIG_PATH}"/master.cf <<EOF
## Custom Generated Postfix RELAY Master Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

# ==========================================================================
# service type  private unpriv  chroot  wakeup  maxproc command + args
#               (yes)   (yes)   (no)    (never) (100)
# ==========================================================================
${postscreen_master_cf}
pickup    unix  n       -       n       60      1       pickup
cleanup   unix  n       -       n       -       0       cleanup
qmgr      unix  n       -       n       300     1       qmgr
tlsmgr    unix  -       -       n       1000?   1       tlsmgr
rewrite   unix  -       -       n       -       -       trivial-rewrite
bounce    unix  -       -       n       -       0       bounce
defer     unix  -       -       n       -       0       bounce
trace     unix  -       -       n       -       0       bounce
verify    unix  -       -       n       -       1       verify
flush     unix  n       -       n       1000?   0       flush
proxymap  unix  -       -       n       -       -       proxymap
proxywrite unix -       -       n       -       1       proxymap
smtp      unix  -       -       n       -       -       smtp
relay     unix  -       -       n       -       -       smtp
        -o syslog_name=postfix/\$service_name
showq     unix  n       -       n       -       -       showq
error     unix  -       -       n       -       -       error
retry     unix  -       -       n       -       -       error
discard   unix  -       -       n       -       -       discard
local     unix  -       n       n       -       -       local
virtual   unix  -       n       n       -       -       virtual
lmtp      unix  -       -       n       -       -       lmtp
anvil     unix  -       -       n       -       1       anvil
scache    unix  -       -       n       -       1       scache
postlog   unix-dgram n  -       n       -       1       postlogd
EOF
            ;;
            "default" | "normal" | "full" | * )
                cat | silent sudo -u postfix tee "${CONFIG_PATH}"/master.cf <<EOF
## Custom Generated Postfix Master Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

# ==========================================================================
# service type  private unpriv  chroot  wakeup  maxproc command + args
#               (yes)   (yes)   (no)    (never) (100)
# ==========================================================================
${postscreen_master_cf}
dnsblog   unix  -       -       n       -       0       dnsblog
tlsproxy  unix  -       -       n       -       0       tlsproxy
submission inet n       -       n       -       -       smtpd ${log_verbosity}
  -o syslog_name=postfix/submission
  -o smtpd_tls_security_level=encrypt
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_tls_auth_only=yes
  -o smtpd_reject_unlisted_recipient=no
${smtpd_client_restrictions_master_cf}
  -o smtpd_recipient_restrictions=
  -o smtpd_relay_restrictions=permit_sasl_authenticated,reject
${milter_master_cf}
  -o milter_macro_daemon_name=ORIGINATING
smtps     inet  n       -       n       -       -       smtpd ${log_verbosity}
  -o syslog_name=postfix/smtps
  -o smtpd_tls_wrappermode=yes
  -o smtpd_sasl_auth_enable=yes
  -o smtpd_reject_unlisted_recipient=no
${smtpd_client_restrictions_master_cf}
  -o smtpd_recipient_restrictions=
  -o smtpd_relay_restrictions=permit_sasl_authenticated,reject
${milter_master_cf}

#628       inet  n       -       n       -       -       qmqpd
pickup    unix  n       -       n       60      1       pickup
cleanup   unix  n       -       n       -       0       cleanup
qmgr      unix  n       -       n       300     1       qmgr
#qmgr     unix  n       -       n       300     1       oqmgr
tlsmgr    unix  -       -       n       1000?   1       tlsmgr
rewrite   unix  -       -       n       -       -       trivial-rewrite
bounce    unix  -       -       n       -       0       bounce
defer     unix  -       -       n       -       0       bounce
trace     unix  -       -       n       -       0       bounce
verify    unix  -       -       n       -       1       verify
flush     unix  n       -       n       1000?   0       flush
proxymap  unix  -       -       n       -       -       proxymap
proxywrite unix -       -       n       -       1       proxymap
smtp      unix  -       -       n       -       -       smtp
relay     unix  -       -       n       -       -       smtp
        -o syslog_name=postfix/\$service_name
#       -o smtp_helo_timeout=5 -o smtp_connect_timeout=5
showq     unix  n       -       n       -       -       showq
error     unix  -       -       n       -       -       error
retry     unix  -       -       n       -       -       error
discard   unix  -       -       n       -       -       discard
local     unix  -       n       n       -       -       local
virtual   unix  -       n       n       -       -       virtual
${lmtp_master_cf}
anvil     unix  -       -       n       -       1       anvil
scache    unix  -       -       n       -       1       scache
#
# maildrop. See the Postfix MAILDROP_README file for details.
# Also specify in main.cf: maildrop_destination_recipient_limit=1
#
maildrop  unix  -       n       n       -       -       pipe
  flags=DRhu user=postfix argv=/usr/bin/maildrop -d \${recipient}
#
# See the Postfix UUCP_README file for configuration details.
#
uucp      unix  -       n       n       -       -       pipe
  flags=Fqhu user=uucp argv=uux -r -n -z -a\$sender - \$nexthop!rmail (\$recipient)

EOF
            ;;
        esac
    fi
}

configure_postfix_sasl() {
    if [ "${SETUP_TYPE,,}" = "auto" ] ; then
        print_notice "[configure_postfix_sasl] Autoconfiguring SMTPD authentication"
        case "${SASL_AUTH_TYPE,,}" in
            "ldap" )
                print_debug "[configure_postfix_sasl] Configuring for LDAP"
                cat <<EOF > /etc/sasl2/smtpd.conf
pwcheck_method: saslauthd
mech_list: plain login

ldap_servers: ${LDAP_HOST}
ldap_bind_dn: ${LDAP_BIND_DN}
ldap_password: ${LDAP_BIND_PASS}
ldap_filter: ${LDAP_FILTER_SASL}
ldap_version: ${LDAP_VERSION}
ldap_timeout: ${LDAP_TIMEOUT}
ldap_scope: ${LDAP_SCOPE_SASL}
ldap_search_base: ${LDAP_SEARCH_DN}
ldap_auth_method: bind
EOF
            ;;
            "imap" )
                print_debug "[configure_postfix_sasl] Configuring for IMAP"
                cat <<EOF >/etc/sasl2/smtpd.conf
pwcheck_method: saslauthd
mech_list: plain login
EOF
            ;;
        esac
    fi
}

configure_postsrsd() {
    if var_true "${ENABLE_SENDER_REWRITE_SCHEME}" ; then
        if [ "${SETUP_TYPE,,}" = "auto" ] ; then
            print_notice "[configure_postsrsd] Autoconfiguring"
            if [ ! -f "${CONFIG_PATH}"/"${POSTSRSD_SECRET}" ]; then
                print_debug "[configure_postsrsd] Generating Random Keys"
                touch "${CONFIG_PATH}"/"${POSTSRSD_SECRET}"
                chown postfix "${CONFIG_PATH}"/"${POSTSRSD_SECRET}"
                cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 18 | head -n 5 | silent sudo -u postfix tee "${CONFIG_PATH}"/"${POSTSRSD_SECRET}"
            fi
        fi
    else
        print_debug "[configure_postsrsd] Disabling PostSRSd"
        rm -rf /etc/services.available/15-postsrsd
    fi
}

configure_tls() {
    certificates dhparam
    certificates "${TLS_SERVER_CERT_FILE}"
}

setup_container_mode() {
    if [ "${SETUP_TYPE,,}" = "auto" ] ; then
        case "${MODE,,}" in
            "relay" | "postfix-relay" )
                print_info "[setup_container_mode] Relay mode activated"
                ENABLE_HEADER_CHECKS=FALSE
                ENABLE_LDAP=FALSE
                ENABLE_LMTP=FALSE
                ENABLE_MILTER=FALSE
                ENABLE_MUA_RESTRICTIONS=FALSE
                ENABLE_PLUS_ADDRESSING=FALSE
                ENABLE_POSTSCREEN=FALSE
                ENABLE_RELAY_HOST=TRUE
                ENABLE_SENDER_REWRITE_SCHEME=FALSE
                ENABLE_SMTPD_CLIENT_RESTRICTIONS=FALSE
                ENABLE_SMTPD_DATA_RESTRICTIONS=FALSE
                ENABLE_SMTPD_RECIPIENT_RESTRICTIONS=FALSE
                ENABLE_SMTPD_SENDER_RESTRICTIONS=FALSE
                ENABLE_SMTPD_HELO_RESTRICTIONS=FALSE
                ENABLE_SMTP_HEADER_CHECKS=FALSE
                SMTPD_FORBID_BARE_NEWLINE=FALSE
                ENABLE_THREADED_BOUNCES=FALSE
                ENABLE_TRANSPORT_MAP=FALSE
                ENABLE_VIRTUAL_MAPS=FALSE
                ENABLE_VIRTUAL_TRANSPORT=FALSE
                container_mode=relay
            ;;
            "default" | "normal" | "full" | * )
                print_info "[setup_container_mode] Full Mailserver mode activated"
                container_mode=default
            ;;
        esac

        ln -sf "${CONFIG_PATH}"/mailname /etc/mailname
        touch "${CONFIG_PATH}"/mailname
        chown postfix:postfix "${CONFIG_PATH}"/mailname
        echo "${SERVER_NAME}" | silent sudo -u postfix tee "${CONFIG_PATH}"/mailname
    else
        print_info "[setup_container_mode] Skipping configuration due to 'SETUP_MODE=manual'"
    fi
}